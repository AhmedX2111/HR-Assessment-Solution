@model IEnumerable<HR_Assessment.Models.Department>

@{
    ViewData["Title"] = "Departments";
}

<!-- Include Bootstrap CSS and JS -->
<link href="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

<!-- Include Ionicons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ionicons@5.5.2/dist/ionicons/ionicons.css">

<div class="container-fluid">
    <div class="row">
        <!-- Include Sidebar Partial -->
        @await Html.PartialAsync("_Sidebar")

        <!-- Main Content -->
        <main role="main" class="col-md-9 ms-sm-auto col-lg-10 px-4">
            <h2>@ViewData["Title"]</h2>

            <!-- Add New Department Button -->
            <p>
                <a class="btn btn-primary" href="@Url.Action("Create")">Add New Department</a>
            </p>

            <!-- Table Container with Scrolling -->
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Location</th>
                            <th>Description</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="departmentTableBody">
                        @foreach (var department in Model)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => department.Name)</td>
                                <td>@Html.DisplayFor(modelItem => department.Location)</td>
                                <td>@Html.DisplayFor(modelItem => department.Description)</td>
                                <td>
                                    <a href="@Url.Action("Details", new { id = department.Id })" class="btn btn-info" title="View Details">
                                        <ion-icon name="search-outline"></ion-icon>
                                    </a>
                                    <a href="@Url.Action("Edit", new { id = department.Id })" class="btn btn-warning" title="Edit">
                                        <ion-icon name="pencil-outline"></ion-icon>
                                    </a>
                                    <a href="@Url.Action("Delete", new { id = department.Id })" class="btn btn-danger" title="Delete">
                                        <ion-icon name="remove-circle-outline"></ion-icon>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </main>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize Bootstrap dropdowns
            var dropdownElementList = [].slice.call(document.querySelectorAll('.dropdown-toggle'));
            dropdownElementList.map(function (dropdownToggleEl) {
                return new bootstrap.Dropdown(dropdownToggleEl);
            });
        });

        document.addEventListener("DOMContentLoaded", function () {
            const searchBox = document.getElementById("searchBox");
            const departmentTableBody = document.getElementById("departmentTableBody");

            searchBox.addEventListener("input", function () {
                const searchQuery = this.value.toLowerCase();
                const rows = departmentTableBody.querySelectorAll("tr");

                rows.forEach(row => {
                    const cells = row.querySelectorAll("td");
                    let rowContainsSearchQuery = false;

                    cells.forEach(cell => {
                        const cellText = cell.textContent;
                        const highlightedText = cellText
                            .replace(new RegExp(searchQuery, 'gi'), match => `<span class="highlight">${match}</span>`);

                        if (highlightedText !== cell.innerHTML) {
                            rowContainsSearchQuery = true;
                        }
                        cell.innerHTML = highlightedText;
                    });

                    row.style.display = rowContainsSearchQuery ? "" : "none";
                });
            });
        });
    </script>
}
