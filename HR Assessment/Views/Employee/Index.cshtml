@model IEnumerable<HR_Assessment.Models.Employee>

@{
    ViewData["Title"] = "Employees";
}

<!-- Include Bootstrap CSS and JS -->
<link href="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

<!-- Include Ionicons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ionicons@5.5.2/dist/ionicons/ionicons.css">

<div class="container-fluid">
    <div class="row">
        <!-- Include Sidebar Partial -->
        @await Html.PartialAsync("_Sidebar")

        <!-- Main Content -->
        <main role="main" class="col-md-9 ms-sm-auto col-lg-10 px-4">
            <h2>@ViewData["Title"]</h2>

            <!-- Record Counter and Search Bar -->
            <div class="d-flex justify-content-between mb-3">
                <div>
                    <label for="recordsPerPage" class="form-label">Records per page:</label>
                    <select id="recordsPerPage" class="form-select form-select-sm" aria-label="Records per page">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                    </select>
                </div>
                <div>
                    <input type="text" id="searchBox" class="form-control form-control-sm" placeholder="Search..." />
                </div>
            </div>

            <p>
                <a href="@Url.Action("Create")" class="btn btn-primary">Create New</a>
            </p>

            <!-- Table Container with Scrolling -->
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Full Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Gender</th>
                            <th>Position</th>
                            <th>Hire Date</th>
                            <th>Birthday</th>
                            <th>Address</th>
                            <th>Note</th>
                            <th>Manage</th>
                        </tr>
                    </thead>
                    <tbody id="employeeTableBody">
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.FullName)</td>
                                <td>@Html.DisplayFor(modelItem => item.Email)</td>
                                <td>@Html.DisplayFor(modelItem => item.Phone)</td>
                                <td>@Html.DisplayFor(modelItem => item.Gender)</td>
                                <td>@Html.DisplayFor(modelItem => item.Position)</td>
                                <td>@Html.DisplayFor(modelItem => item.HireDate)</td>
                                <td>@Html.DisplayFor(modelItem => item.Birthday)</td>
                                <td>@Html.DisplayFor(modelItem => item.Address)</td>
                                <td>@Html.DisplayFor(modelItem => item.Note)</td>
                                <td>
                                    <a href="@Url.Action("Details", new { id = item.Id })" class="btn btn-info" title="View Details">
                                        <ion-icon name="search-outline"></ion-icon>
                                    </a>
                                    <a href="@Url.Action("Edit", new { id = item.Id })" class="btn btn-warning" title="Edit">
                                        <ion-icon name="pencil-outline"></ion-icon>
                                    </a>
                                    <a href="@Url.Action("Delete", new { id = item.Id })" class="btn btn-danger" title="Delete">
                                        <ion-icon name="remove-circle-outline"></ion-icon>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </main>

    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Function to load content dynamically
            function loadContent(url) {
                fetch(url)
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById("main-content").innerHTML = html;
                    })
                    .catch(error => {
                        console.error('Error loading content:', error);
                        document.getElementById("main-content").innerHTML = "<p class='text-danger'>Failed to load content.</p>";
                    });
            }

            // Event listeners for sidebar links
            document.getElementById("viewEmployeesLink").addEventListener("click", function (e) {
                e.preventDefault();
                loadContent("@Url.Action("Index", "Employee")");
            });

            document.getElementById("viewDepartmentsLink").addEventListener("click", function (e) {
                e.preventDefault();
                loadContent("@Url.Action("Index", "Department")");
            });
        });
    </script>
}



